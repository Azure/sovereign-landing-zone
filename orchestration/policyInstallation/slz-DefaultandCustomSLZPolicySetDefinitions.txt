//This bicep file includes auto-generated code. Please dont make any changes these file manually.

targetScope = 'managementGroup'

/* reserved customer usage attribution
@description('Set Parameter to true to Opt-out of deployment telemetry')
param parTelemetryOptOut bool = false
*/

// <!-- slzDefaultandCustomPolicySetDefinitionsReplacementStart --> // DO NOT Remove This Line !!!
var varCustomPolicySetDefinitionsArray = [
{
		name: 'SlzConfidentialPolicies'
		libSetDefinition: loadJsonContent('lib/policy_set_definitions/slzConfidentialDefaults.json')
		libSetChildDefinitions: [
			{
				definitionReferenceId: '[Preview]: Azure Recovery Services vaults should use customer-managed keys for encrypting backup dat_1'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/2e94d99a-8a36-4563-bc77-810d8893b671'
				definitionParameters: varSlzConfidentialDefaultsParameters['[Preview]: Azure Recovery Services vaults should use customer-managed keys for encrypting backup dat_1'].parameters
				definitionGroups: ['dashboard-Key Management']
			}
			{
				definitionReferenceId: 'Allowed resource types'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/a08ec900-254a-4555-9bf5-e42af04b5c5c'
				definitionParameters: varSlzConfidentialDefaultsParameters['Allowed resource types'].parameters
				definitionGroups: ['dashboard-Confidential Computing']
			}
			{
				definitionReferenceId: 'Allowed virtual machine size SKUs'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/cccc23c7-8427-4f53-ad12-b6a63eb452b3'
				definitionParameters: varSlzConfidentialDefaultsParameters['Allowed virtual machine size SKUs'].parameters
				definitionGroups: ['dashboard-Confidential Computing']
			}
			{
				definitionReferenceId: 'AllowedLocations'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/e56962a6-4747-49cd-b67b-bf8b01975c4c'
				definitionParameters: varSlzConfidentialDefaultsParameters.AllowedLocations.parameters
				definitionGroups: ['dashboard-Data Residency']
			}
			{
				definitionReferenceId: 'AllowedLocationsForResourceGroups'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/e765b5de-1225-4ba3-bd56-1ac6695af988'
				definitionParameters: varSlzConfidentialDefaultsParameters.AllowedLocationsForResourceGroups.parameters
				definitionGroups: ['dashboard-Data Residency']
			}
			{
				definitionReferenceId: 'Azure Cosmos DB allowed locations_1'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/0473574d-2d43-4217-aefe-941fcdf7e684'
				definitionParameters: varSlzConfidentialDefaultsParameters['Azure Cosmos DB allowed locations_1'].parameters
				definitionGroups: ['dashboard-Data Residency']
			}
			{
				definitionReferenceId: 'Both operating systems and data disks in Azure Kubernetes Service clusters should be encrypted by cu_1'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/7d7be79c-23ba-4033-84dd-45e2a5ccdd67'
				definitionParameters: varSlzConfidentialDefaultsParameters['Both operating systems and data disks in Azure Kubernetes Service clusters should be encrypted by cu_1'].parameters
				definitionGroups: ['dashboard-Key Management']
			}
			{
				definitionReferenceId: 'HPC Cache accounts should use customer-managed key for encryption_1'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/970f84d8-71b6-4091-9979-ace7e3fb6dbb'
				definitionParameters: varSlzConfidentialDefaultsParameters['HPC Cache accounts should use customer-managed key for encryption_1'].parameters
				definitionGroups: ['dashboard-Key Management']
			}
			{
				definitionReferenceId: 'Managed disks should be double encrypted with both platform-managed and customer-managed keys_1'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/ca91455f-eace-4f96-be59-e6e2c35b4816'
				definitionParameters: varSlzConfidentialDefaultsParameters['Managed disks should be double encrypted with both platform-managed and customer-managed keys_1'].parameters
				definitionGroups: ['dashboard-Key Management']
			}
			{
				definitionReferenceId: 'MySQL servers should use customer-managed keys to encrypt data at rest_1'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/83cef61d-dbd1-4b20-a4fc-5fbc7da10833'
				definitionParameters: varSlzConfidentialDefaultsParameters['MySQL servers should use customer-managed keys to encrypt data at rest_1'].parameters
				definitionGroups: ['dashboard-Key Management']
			}
			{
				definitionReferenceId: 'PostgreSQL servers should use customer-managed keys to encrypt data at rest_1'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/18adea5e-f416-4d0f-8aa8-d24321e3e274'
				definitionParameters: varSlzConfidentialDefaultsParameters['PostgreSQL servers should use customer-managed keys to encrypt data at rest_1'].parameters
				definitionGroups: ['dashboard-Key Management']
			}
			{
				definitionReferenceId: 'Queue Storage should use customer-managed key for encryption_1'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/f0e5abd0-2554-4736-b7c0-4ffef23475ef'
				definitionParameters: varSlzConfidentialDefaultsParameters['Queue Storage should use customer-managed key for encryption_1'].parameters
				definitionGroups: ['dashboard-Key Management']
			}
			{
				definitionReferenceId: 'SQL managed instances should use customer-managed keys to encrypt data at rest_1'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/ac01ad65-10e5-46df-bdd9-6b0cad13e1d2'
				definitionParameters: varSlzConfidentialDefaultsParameters['SQL managed instances should use customer-managed keys to encrypt data at rest_1'].parameters
				definitionGroups: ['dashboard-Key Management']
			}
			{
				definitionReferenceId: 'SQL servers should use customer-managed keys to encrypt data at rest_1'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/0a370ff3-6cab-4e85-8995-295fd854c5b8'
				definitionParameters: varSlzConfidentialDefaultsParameters['SQL servers should use customer-managed keys to encrypt data at rest_1'].parameters
				definitionGroups: ['dashboard-Key Management']
			}
			{
				definitionReferenceId: 'Storage account encryption scopes should use customer-managed keys to encrypt data at rest_1'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/b5ec538c-daa0-4006-8596-35468b9148e8'
				definitionParameters: varSlzConfidentialDefaultsParameters['Storage account encryption scopes should use customer-managed keys to encrypt data at rest_1'].parameters
				definitionGroups: ['dashboard-Key Management']
			}
			{
				definitionReferenceId: 'Storage accounts should use customer-managed key for encryption_1'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/6fac406b-40ca-413b-bf8e-0bf964659c25'
				definitionParameters: varSlzConfidentialDefaultsParameters['Storage accounts should use customer-managed key for encryption_1'].parameters
				definitionGroups: ['dashboard-Key Management']
			}
			{
				definitionReferenceId: 'Table Storage should use customer-managed key for encryption_1'
				definitionId: '/providers/Microsoft.Authorization/policyDefinitions/7c322315-e26d-4174-a99e-f49d351b4688'
				definitionParameters: varSlzConfidentialDefaultsParameters['Table Storage should use customer-managed key for encryption_1'].parameters
				definitionGroups: ['dashboard-Key Management']
			}
		]
	}
]

// Policy Set/Initiative Definition Parameter Variables
var varSlzConfidentialDefaultsParameters = loadJsonContent('lib/policy_set_definitions/slzConfidentialDefaults.parameters.json')

// <!-- slzDefaultandCustomPolicySetDefinitionsReplacementEnd --> // DO NOT Remove This Line !!!

resource resPolicySetDefinitions 'Microsoft.Authorization/policySetDefinitions@2021-06-01' = [for policySet in varCustomPolicySetDefinitionsArray: {
  name: '${policySet.libSetDefinition.name}.v${policySet.libSetDefinition.properties.metadata.version}'
  properties: {
    description: '${policySet.libSetDefinition.properties.description} v${policySet.libSetDefinition.properties.metadata.version}'
    displayName: '${policySet.libSetDefinition.properties.displayName} v${policySet.libSetDefinition.properties.metadata.version}'
    metadata: policySet.libSetDefinition.properties.metadata
    parameters: policySet.libSetDefinition.properties.parameters
    policyType: policySet.libSetDefinition.properties.policyType
    policyDefinitions: [for policySetDef in policySet.libSetChildDefinitions: {
      policyDefinitionReferenceId: policySetDef.definitionReferenceId
      policyDefinitionId: policySetDef.definitionId
      parameters: policySetDef.definitionParameters
	  groupNames: policySetDef.definitionGroups
    }]
    policyDefinitionGroups: policySet.libSetDefinition.properties.policyDefinitionGroups
  }
}]
